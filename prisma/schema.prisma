
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    DateTime?
  emailVerified Boolean?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions   Session[]
  accounts   Account[]
  magicLinks MagicLink[]
  members    Member[]
  responses  Response[]

  image       String?
  invitations Invitation[]

  @@schema("auth")
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String?
  activeOrganizationId String?

  @@schema("auth")
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@schema("auth")
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@schema("auth")
  @@map("verification")
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members     Member[]
  invitations Invitation[]
  quizzes     Quiz[]

  @@schema("auth")
  @@map("organization")
}

model Member {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@schema("auth")
  @@map("member")
}

model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  email          String
  role           String   @default("member")
  inviterId      String
  token          String   @unique
  status         String   @default("pending")
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@schema("auth")
  @@map("invitation")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model Quiz {
  id             String   @id @default(cuid())
  title          String
  description    String?
  organizationId String
  createdBy      String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  questions    Question[]
  responses    Response[]

  @@schema("public")
}

model Question {
  id            String   @id @default(cuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer String
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Response {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  answers     Json
  score       Float?
  completedAt DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}
