
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

enum UserType {
  Teacher
  Parent
  Student
  Admin

  @@schema("auth")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  role             String    @default("user")
  userType         UserType?
  phone            String?
  emergencyContact Json?
  banned           Boolean   @default(false)
  banReason        String?
  banExpires       DateTime?
  emailVerified    Boolean?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  sessions        Session[]
  accounts        Account[]
  magicLinks      MagicLink[]
  members         Member[]
  responses       Response[]
  invitations     Invitation[]
  teacherProfile  Teacher?
  studentProfile  Student?
  parentProfile   Parent?

  image String?

  @@schema("auth")
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String?
  activeOrganizationId String?

  @@schema("auth")
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@schema("auth")
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@schema("auth")
  @@map("verification")
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model Campus {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  logo          String?
  metadata      Json?
  address       String?
  phone         String?
  principalName String?
  capacity      Int?
  location      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  members     Member[]
  invitations Invitation[]
  assessments Assessment[]
  teachers    Teacher[]
  students    Student[]
  classrooms  Classroom[]

  @@schema("auth")
  @@map("organization")
}

model Member {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  campus Campus @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@schema("auth")
  @@map("member")
}

model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  email          String
  role           String   @default("member")
  inviterId      String
  token          String   @unique
  status         String   @default("pending")
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  campus  Campus @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter User   @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@schema("auth")
  @@map("invitation")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model Assessment {
  id             String   @id @default(cuid())
  title          String
  description    String?
  organizationId String
  createdBy      String
  subject        String?
  gradeLevel     String?
  classroomId    String?
  assignedTo     String[]
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  campus    Campus     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  questions Question[]
  responses Response[]

  @@schema("public")
  @@map("quiz")
}

model Question {
  id            String   @id @default(cuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer String
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  assessment Assessment @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Response {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  answers     Json
  score       Float?
  completedAt DateTime @default(now())

  assessment Assessment @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Password {
  id        String   @id @default(cuid())
  hash      String
  length    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("auth")
  @@map("password")
}

model Teacher {
  id             String   @id @default(cuid())
  userId         String   @unique
  certifications String[]
  subjects       String[]
  employeeId     String?  @unique
  cvUrl          String?
  campusId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  campus     Campus      @relation(fields: [campusId], references: [id], onDelete: Cascade)
  classrooms Classroom[]

  @@schema("public")
}

model Student {
  id                String                @id @default(cuid())
  userId            String                @unique
  grade             String
  enrollmentDate    DateTime              @default(now())
  campusId          String
  authorizedPickups Json?
  medicalInfo       Json?
  photoUrl          String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  campus     Campus                @relation(fields: [campusId], references: [id], onDelete: Cascade)
  parents    StudentParent[]
  classrooms ClassroomEnrollment[]

  @@schema("public")
}

model Parent {
  id             String   @id @default(cuid())
  userId         String   @unique
  primaryContact Boolean  @default(false)
  relationship   String
  occupation     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  students StudentParent[]

  @@schema("public")
}

model StudentParent {
  id        String   @id @default(cuid())
  studentId String
  parentId  String
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@schema("public")
}

model Classroom {
  id         String   @id @default(cuid())
  name       String
  grade      String
  subject    String
  campusId   String
  teacherId  String
  capacity   Int?
  room       String?
  schedule   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campus    Campus               @relation(fields: [campusId], references: [id], onDelete: Cascade)
  teacher   Teacher              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students  ClassroomEnrollment[]

  @@schema("public")
}

model ClassroomEnrollment {
  id          String   @id @default(cuid())
  classroomId String
  studentId   String
  enrolledAt  DateTime @default(now())

  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classroomId, studentId])
  @@schema("public")
}

enum TargetAudience {
  AllParents
  AllTeachers
  Classroom
  Grade

  @@schema("public")
}

model Message {
  id             String   @id @default(cuid())
  senderId       String
  recipientId    String
  subject        String
  content        String
  conversationId String
  isRead         Boolean  @default(false)
  campusId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("public")
}

model Announcement {
  id             String          @id @default(cuid())
  title          String
  content        String
  authorId       String
  campusId       String
  targetAudience TargetAudience
  classroomId    String?
  grade          String?
  isPinned       Boolean         @default(false)
  publishedAt    DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@schema("public")
}

enum AttendanceStatus {
  Present
  Absent
  Late

  @@schema("public")
}

model AttendanceSession {
  id          String   @id @default(cuid())
  classroomId String
  date        DateTime
  campusId    String
  markedById  String
  createdAt   DateTime @default(now())

  records AttendanceRecord[]

  @@schema("public")
}

model AttendanceRecord {
  id        String           @id @default(cuid())
  sessionId String
  studentId String
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())

  session AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@schema("public")
}

model Grade {
  id            String   @id @default(cuid())
  studentId     String
  classroomId   String
  subject       String
  grade         String
  gradingPeriod String
  teacherId     String
  comments      String?
  campusId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("public")
}

enum EventType {
  Holiday
  ParentTeacherConference
  Assembly
  FieldTrip
  ExamPeriod
  Other

  @@schema("public")
}

model CalendarEvent {
  id            String    @id @default(cuid())
  title         String
  description   String?
  eventType     EventType
  startDate     DateTime
  endDate       DateTime?
  campusId      String
  isSchoolClosed Boolean   @default(false)
  createdById   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@schema("public")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday

  @@schema("public")
}

model CafeteriaMenu {
  id            String    @id @default(cuid())
  weekStartDate DateTime
  dayOfWeek     DayOfWeek
  menuItems     Json
  specialNotes  String?
  campusId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([campusId, weekStartDate, dayOfWeek])
  @@schema("public")
}
