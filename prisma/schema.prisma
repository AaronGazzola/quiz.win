generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@schema("auth")
}

model invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           String       @default("member")
  inviterId      String
  token          String       @unique
  status         String       @default("pending")
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           user         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@schema("auth")
}

model member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@schema("auth")
}

model organization {
  id            String       @id @default(cuid())
  name          String
  slug          String       @unique
  logo          String?
  metadata      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  address       String?
  capacity      Int?
  location      String?
  phone         String?
  principalName String?
  invitation    invitation[]
  member        member[]
  Classroom     Classroom[]
  Student       Student[]
  Teacher       Teacher[]
  quiz          quiz[]

  @@schema("auth")
}

model session {
  id                   String   @id @default(cuid())
  userId               String
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  impersonatedBy       String?
  activeOrganizationId String?
  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model user {
  id               String       @id @default(cuid())
  email            String       @unique
  name             String?
  role             String       @default("user")
  banned           Boolean      @default(false)
  banReason        String?
  banExpires       DateTime?
  emailVerified    Boolean?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  image            String?
  emergencyContact Json?
  phone            String?
  userType         UserType?
  MagicLink        MagicLink[]
  account          account[]
  invitation       invitation[]
  member           member[]
  session          session[]
  Parent           Parent?
  Response         Response[]
  Student          Student?
  Teacher          Teacher?

  @@schema("auth")
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@schema("auth")
}

model Announcement {
  id             String         @id @default(cuid())
  title          String
  content        String
  authorId       String
  campusId       String
  targetAudience TargetAudience
  classroomId    String?
  grade          String?
  isPinned       Boolean        @default(false)
  publishedAt    DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@schema("public")
}

model AttendanceRecord {
  id                String            @id @default(cuid())
  sessionId         String
  studentId         String
  status            AttendanceStatus
  notes             String?
  createdAt         DateTime          @default(now())
  AttendanceSession AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@schema("public")
}

model AttendanceSession {
  id               String             @id @default(cuid())
  classroomId      String
  date             DateTime
  campusId         String
  markedById       String
  createdAt        DateTime           @default(now())
  AttendanceRecord AttendanceRecord[]

  @@schema("public")
}

model CafeteriaMenu {
  id            String    @id @default(cuid())
  weekStartDate DateTime
  dayOfWeek     DayOfWeek
  menuItems     Json
  specialNotes  String?
  campusId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([campusId, weekStartDate, dayOfWeek])
  @@schema("public")
}

model CalendarEvent {
  id             String    @id @default(cuid())
  title          String
  description    String?
  eventType      EventType
  startDate      DateTime
  endDate        DateTime?
  campusId       String
  isSchoolClosed Boolean   @default(false)
  createdById    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("public")
}

model Classroom {
  id                  String                @id @default(cuid())
  name                String
  grade               String
  subject             String
  campusId            String
  teacherId           String
  capacity            Int?
  room                String?
  schedule            Json?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime @updatedAt
  organization        organization          @relation(fields: [campusId], references: [id], onDelete: Cascade)
  Teacher             Teacher               @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  ClassroomEnrollment ClassroomEnrollment[]

  @@schema("public")
}

model ClassroomEnrollment {
  id          String    @id @default(cuid())
  classroomId String
  studentId   String
  enrolledAt  DateTime  @default(now())
  Classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  Student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classroomId, studentId])
  @@schema("public")
}

model Grade {
  id            String   @id @default(cuid())
  studentId     String
  classroomId   String
  subject       String
  grade         String
  gradingPeriod String
  teacherId     String
  comments      String?
  campusId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("public")
}

model Message {
  id             String   @id @default(cuid())
  senderId       String
  recipientId    String
  subject        String
  content        String
  conversationId String
  isRead         Boolean  @default(false)
  campusId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("public")
}

model Parent {
  id             String          @id @default(cuid())
  userId         String          @unique
  primaryContact Boolean         @default(false)
  relationship   String
  occupation     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime @updatedAt
  user           user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  StudentParent  StudentParent[]

  @@schema("public")
}

model Password {
  id        String   @id @default(cuid())
  length    Int
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model Question {
  id            String   @id @default(cuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer String
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quiz          quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Response {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  answers     Json
  score       Float?
  completedAt DateTime @default(now())
  quiz        quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Student {
  id                  String                @id @default(cuid())
  userId              String                @unique
  grade               String
  enrollmentDate      DateTime              @default(now())
  campusId            String
  authorizedPickups   Json?
  medicalInfo         Json?
  photoUrl            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime @updatedAt
  ClassroomEnrollment ClassroomEnrollment[]
  organization        organization          @relation(fields: [campusId], references: [id], onDelete: Cascade)
  user                user                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  StudentParent       StudentParent[]

  @@schema("public")
}

model StudentParent {
  id        String   @id @default(cuid())
  studentId String
  parentId  String
  createdAt DateTime @default(now())
  Parent    Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  Student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@schema("public")
}

model Teacher {
  id             String       @id @default(cuid())
  userId         String       @unique
  certifications String[]
  subjects       String[]
  employeeId     String?      @unique
  cvUrl          String?
  campusId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime @updatedAt
  Classroom      Classroom[]
  organization   organization @relation(fields: [campusId], references: [id], onDelete: Cascade)
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  organizationId String
  createdBy      String
  subject        String?
  gradeLevel     String?
  classroomId    String?
  assignedTo     String[]
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime @updatedAt
  Question       Question[]
  Response       Response[]
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@schema("public")
}

enum UserType {
  Teacher
  Parent
  Student
  Admin

  @@schema("auth")
}

enum AttendanceStatus {
  Present
  Absent
  Late

  @@schema("public")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday

  @@schema("public")
}

enum EventType {
  Holiday
  ParentTeacherConference
  Assembly
  FieldTrip
  ExamPeriod
  Other

  @@schema("public")
}

enum TargetAudience {
  AllParents
  AllTeachers
  Classroom
  Grade

  @@schema("public")
}
